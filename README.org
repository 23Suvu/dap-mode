[[https://travis-ci.org/yyoncho/dap-mode][https://travis-ci.org/yyoncho/dap-mode.svg?branch=master]]
[[https://coveralls.io/github/yyoncho/dap-mode?branch=master][https://coveralls.io/repos/github/yyoncho/dap-mode/badge.svg?branch=master]]
* Table of Contents                                       :TOC_4_gh:noexport:
- [[#summary][Summary]]
- [[#screenshot][Screenshot]]
- [[#features][Features]]
  - [[#debugger-commands][Debugger commands]]
  - [[#windows][Windows]]
  - [[#sessions][Sessions]]
    - [[#keybindings][Keybindings]]
  - [[#locals][Locals]]
  - [[#breakpoints][Breakpoints]]
    - [[#keybindings-1][Keybindings]]
- [[#configuration][Configuration]]
  - [[#dap-mode-configuration][DAP mode configuration]]
  - [[#java][Java]]
    - [[#installation][Installation]]
    - [[#commands][Commands]]
- [[#extending-dap-with-new-debug-servers][Extending DAP with new Debug servers]]
    - [[#example][Example]]
- [[#links][Links]]
- [[#troubleshooting][Troubleshooting]]
- [[#whats-next][What's next]]

* Summary
  Emacs client/library for [[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]]
  [[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]] is a wire protocol for communication between client and
  Debug Server. It similar to the [[https://github.com/Microsoft/language-server-protocol][LSP]] but providers integration with debug
  server.

  Project status.
* Screenshot
  [[file:screenshots/MultiSession.png]]
* Features
  - Launch/Attach
  - Breakpoints
  - Exceptions
  - Pause & Continue
  - Step In/Out/Over
  - Callstacks
  - Threads
  - Multiple simultaneous debug sessions
  - Evaluating statements
  - Debug/Run configurations
** Debugger commands
   | Command                        | Description                                                     |
   |--------------------------------+-----------------------------------------------------------------|
   | ~dap-breakpoint-toggle~        | Toggle java breakpoint at line                                  |
   | ~dap-breakpoint-delete~        | Delete java breakpoint at line                                  |
   | ~dap-breakpoint-add~           | Add java breakpoint at line                                     |
   | ~dap-breakpoint-condition~     | Set/unset breakpoint condition                                  |
   | ~dap-breakpoint-hit-condition~ | Set/unset breakpoint hit condition                              |
   | ~dap-breakpoint-log-message~   | Set/unset breakpoint log message                                |
   | ~dap-eval~                     | Eval string                                                     |
   | ~dap-eval-region~              | Eval region string                                              |
   | ~dap-eval-thing-at-point~      | Eval symbol at point                                            |
   | ~dap-step-in~                  | Debug step in                                                   |
   | ~dap-next~                     | Debug next                                                      |
   | ~dap-step-out~                 | Debug step out                                                  |
   | ~dap-stop-thread~              | Stop thread                                                     |
   | ~dap-restart-frame~            | Restart frame                                                   |
   | ~dap-continue~                 | Debug continue                                                  |
   | ~dap-disconnect~               | Cancel current debug session                                    |
   | ~dap-switch-stack-frame~       | Switch active stack frame                                       |
   | ~dap-switch-thread~            | Switch active thread                                            |
   | ~dap-switch-session~           | Switch active session                                           |
   | ~dap-debug~                    | Create and run new configuration using the available templates  |
   | ~dap-debug-last~               | Debug previous configuration                                    |
   | ~dap-debug-recent~             | Select configuration to run from the previously started command |
   | ~dap-go-to-output-buffer~      | Go output buffer                                                |
** Windows
   | Command                         | Description                          |
   |---------------------------------+--------------------------------------|
   | ~dap-ui-sessions~               | Show active/terminated sessions view |
   | ~dap-ui-locals~                 | Show locals view                     |
   | ~dap-ui-breakpoints~            | Show breakpoints view                |
   | ~dap-ui-inspect~                | Inspect                              |
   | ~dap-ui-inspect-region~         | Inspect region                       |
   | ~dap-ui-inspect-thing-at-point~ | Inspect symbol at point              |

** Sessions
   The sessions view is showed after invoking ~dap-ui-sessions~ . It represents
   the list of the active sessions.
*** Keybindings
    | Command                     | Description                                                 | Keybindings |
    |-----------------------------+-------------------------------------------------------------+-------------|
    | ~dap-ui-session-select~     | Select object at point                                      | <return>    |
    | ~dap-ui-session-remove~ WIP | Remove terminated session from the list of running sessions |             |
    | ~tree-mode-toggle-expand~   | Toggle node expand state                                    | <tab>       |
** Locals
   Locals can be viewed after invoking ~dap-ui-locals~.
** Breakpoints
   Breakpoints can be viewed after invoking ~dap-ui-breakpoints~.
*** Keybindings
    | Command                              | Description                    | Keybindings |
    |--------------------------------------+--------------------------------+-------------|
    | ~dap-ui-breakpoints-goto~            | Go to breakpoint under cursor  | <return>    |
    | ~dap-ui-breakpoints-delete~          | Delete breakpoint under cursor | d           |
    | ~dap-ui-breakpoints-delete-selected~ | Delete selected breakpoints    | D           |
    | ~bui-list-mark~                      | Mark breakpoint under point    | m           |
    | ~bui-list-unmark~                    | Unmark breakpoint under point  | u           |
    | ~bui-list-unmark-all~                | Unmark breakpoint under point  | U           |
* Configuration
** DAP mode configuration
   Enable both ~dap-mode~ and ~dap-ui-mode~.
   #+BEGIN_SRC emacs-lisp
     (dap-mode 1)
     (dap-ui-mode 1)
   #+END_SRC
   After enabling DAP mode on emacs side follow the language specific settings.
** Java
*** Installation
    Make sure that you have properly installed and configured [[https://github.com/emacs-lsp/lsp-java][LSP Java]]. Download
    latest version of [[https://github.com/Microsoft/java-debug][Debug Java]] from [[https://mvnrepository.com/artifact/com.microsoft.java/com.microsoft.java.debug.plugin ][Maven Central]] and put it in
    ~.emacs.d/eclipse.jdt.ls/plugins~. On linux you can do that by running the
    following command:
    #+BEGIN_SRC bash
      mkdir -p ~/.emacs.d/eclipse.jdt.ls/plugins/
      mvn dependency:get -DrepoUrl=https://mvnrepository.com/repos/central -DgroupId=com.microsoft.java -DartifactId=com.microsoft.java.debug.plugin -Dversion=0.9.0
      cp ~/.m2/repository/com/microsoft/java/com.microsoft.java.debug.plugin/0.9.0/com.microsoft.java.debug.plugin-0.9.0.jar ~/.emacs.d/eclipse.jdt.ls/plugins/com.microsoft.java.debug.plugin-0.9.0.jar
    #+END_SRC
    If you want to run unit tests you have to download the [[https://github.com/junit-team/junit5][JUnit5's]] JUnit Platform Console Standalone from [[https://mvnrepository.com/artifact/org.junit.platform/junit-platform-console-standalone][Maven Central]]. On Linux/MacOS you can do the following:

    #+BEGIN_SRC bash
      mkdir -p ~/.emacs.d/eclipse.jdt.ls/runner/
      mvn dependency:get -DrepoUrl=https://mvnrepository.com/repos/central -DgroupId=org.junit.platform -DartifactId=junit-platform-console-standalone -Dversion=1.3.0-M1
      cp ~/.m2/repository/org/junit/platform/junit-platform-console-standalone/1.3.0-M1/junit-platform-console-standalone-1.3.0-M1.jar ~/.emacs.d/eclipse.jdt.ls/runner/junit-platform-console-standalone.jar
      # Download Che JDT LS.
      rm -rf ~/.emacs.d/eclipse.jdt.ls/server/
      mkdir -p ~/.emacs.d/eclipse.jdt.ls/server/
      wget http://download.eclipse.org/che/che-ls-jdt/snapshots/che-jdt-language-server-latest.tar.gz -O /tmp/jdt-latest.tar
      tar xf /tmp/jdt-latest.tar -C ~/.emacs.d/eclipse.jdt.ls/server/
    #+END_SRC
    Then add the following settings in your emacs config file:
    #+BEGIN_SRC elisp
      (dap-mode 1)
      (dap-ui-mode 1)

      (add-to-list 'lsp-java-bundles (expand-file-name
                                     (locate-user-emacs-file
                                      "eclipse.jdt.ls/plugins/com.microsoft.java.debug.plugin-0.9.0.jar")))
    #+END_SRC
*** Commands
    | Command                      | Description       |
    |------------------------------+-------------------|
    | ~dap-java-debug~             | Debug java        |
    | ~dap-java-run-test-method~   | Run test method   |
    | ~dap-java-debug-test-method~ | Debug test method |
    | ~dap-java-run-test-class~    | Run test class    |
    | ~dap-java-debug-test-class~  | Debug test class  |
* Extending DAP with new Debug servers
  There are two methods that are used for registering remote extensions: -
  - ~dap-register-debug-provider~ register a method which will be called to
    populate startup parameters with plist which will contain the run. The
    method must populate also the debug server configuration. It should either
    populate ~:debugPort~ and ~:host~ in case of TCP Debug Adapter Server or
    ~:program~ when STD out must be used for Debug Adapter Server communication.
  - ~dap-register-debug-template~ register a debug deplate which will be
    available when ~dap-debug~ is called. The debug template must specify
    ~:type~ key which will be used to determine the provider to be called to
    populate missing fields.
*** Example
    For full example you may check ~dap-java.el~.
    #+BEGIN_SRC emacs-lisp
      (dap-register-debug-provider
       "java"
       (lambda (conf)
         (plist-put conf :debugPort 1234)
         (plist-put conf :host "localhost")
         conf))

      (dap-register-debug-template "Example Configuration"
                                  (list :type "java"
                                        :request "launch"
                                        :args ""
                                        :name "Run Configuration"))
    #+END_SRC
* Links
  - [[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]]
  - [[https://github.com/emacs-lsp/lsp-java][LSP Java]]
  - [[https://github.com/Microsoft/vscode-debugadapter-node/wiki/VS-Code-Debug-Protocol-Implementations][Debug Adapter Protocol Server Implementations]]
* Troubleshooting
  If you notice a bug, open an issue on Github Issues.
* What's next
  - Watches
  - Debug console
